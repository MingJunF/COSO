hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(purple)sHYDRA%(reset)s] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(blue)s%(name)s%(reset)s][%(log_color)s%(levelname)s%(reset)s]
          - %(message)s'
        log_colors:
          DEBUG: purple
          INFO: green
          WARNING: yellow
          ERROR: red
          CRITICAL: red
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - +dataset=cancer_sim
    - +backbone=coso
    - +backbone/coso_hparams/cancer_sim_domain_conf='0'
  job:
    name: train_coso
    chdir: null
    override_dirname: +backbone/coso_hparams/cancer_sim_domain_conf='0',+backbone=coso,+dataset=cancer_sim
    id: ???
    num: ???
    config_name: config.yaml
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.1'
    cwd: D:\Mingjun\COSO
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: D:\Mingjun\COSO\config
      schema: file
      provider: main
    - path: hydra_plugins.hydra_colorlog.conf
      schema: pkg
      provider: hydra-colorlog
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      backbone/coso_hparams/cancer_sim_domain_conf: '0'
      backbone: coso
      dataset: cancer_sim
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: colorlog
      hydra/hydra_logging: colorlog
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
model:
  dim_treatments: 4
  dim_vitals: 0
  dim_static_features: 1
  dim_outcomes: 1
  dim_cosovitals: ???
  dim_abstract_confounders: ???
  dim_s: ???
  name: COSO
  COSO:
    _target_: src.models.coso.COSO
    seq_hidden_units: 64
    br_size: 3
    fc_hidden_units: 6
    dropout_rate: 0.3
    num_layer: 1
    batch_size: 32
    s_alpha: 1
    optimizer:
      optimizer_cls: adam
      learning_rate: 0.001
      weight_decay: 0.0
      lr_scheduler: false
    tune_hparams: false
    tune_range: 1
    hparams_grid: null
    resources_per_trial: null
  encoder:
    _target_: src.models.coso.CRNEncoder
    seq_hidden_units: 48
    br_size: 6
    fc_hidden_units: 24
    dropout_rate: 0.1
    num_layer: 1
    batch_size: 64
    s_alpha: null
    optimizer:
      optimizer_cls: adam
      learning_rate: 0.01
      weight_decay: 0.0
      lr_scheduler: false
    tune_hparams: false
    tune_range: 50
    hparams_grid: null
    resources_per_trial: null
  train_decoder: false
  decoder:
    _target_: src.models.coso.CRNDecoder
    seq_hidden_units: 3
    br_size: 18
    fc_hidden_units: 18
    dropout_rate: 0.1
    num_layer: 1
    batch_size: 1024
    s_alpha: null
    optimizer:
      optimizer_cls: adam
      learning_rate: 0.01
      weight_decay: 0.0
      lr_scheduler: false
    tune_hparams: false
    tune_range: 30
    hparams_grid: null
    resources_per_trial: null
dataset:
  val_batch_size: 512
  treatment_mode: multiclass
  _target_: src.data.SyntheticVitalDatasetCollection
  name: tumor_generator
  seed: ${exp.seed}
  num_confounder: 3
  num_u: 1
  split:
    val: 0.15
    test: 0.15
  window_size: 15
  lag: 0
  max_seq_length: 60
  projection_horizon: 5
  cf_seq_mode: sliding_treatment
  time_step: 30
exp:
  seed: 100
  gpus:
  - 0
  max_epochs: 150
  logging: true
  mlflow_uri: http://127.0.0.1:5000
  unscale_rmse: true
  percentage_rmse: true
  alpha: 0.01
  update_alpha: true
  alpha_rate: exp
  balancing: domain_confusion
  bce_weight: false
  weights_ema: true
  beta: 0.99
